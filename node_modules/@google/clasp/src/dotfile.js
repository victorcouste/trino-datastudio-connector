"use strict";
/**
 * Manages dotfiles. There are 2 types of dotfiles:
 *
 * Global clasp auth settings:
 * - File: ~/.clasp.json
 * - Default credentials for clasp projects.
 *
 * Local clasp auth settings:
 * - File: .clasp.json
 * - Requires `clasp login --creds creds.json`
 *
 * This should be the only file that uses DOTFILE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = __importDefault(require("os"));
var path_1 = __importDefault(require("path"));
var find_up_1 = __importDefault(require("find-up"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var strip_bom_1 = __importDefault(require("strip-bom"));
var dotf = require('dotf');
var splitLines = require('split-lines');
// TEMP CIRCULAR DEPS, TODO REMOVE
// import { PROJECT_NAME } from './utils';
var PROJECT_NAME = 'clasp';
// TODO: workaround the circular dependency with `files.ts`
// @see https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options
var FS_OPTIONS = { encoding: 'utf8' };
// Dotfile names
exports.DOT = {
    /**
     * This dotfile stores information about ignoring files on `push`. Like .gitignore.
     */
    IGNORE: {
        DIR: '~',
        NAME: PROJECT_NAME + "ignore",
        PATH: "." + PROJECT_NAME + "ignore",
    },
    /**
     * This dotfile saves clasp project information, local to project directory.
     */
    PROJECT: {
        DIR: path_1.default.join('.', '/'),
        NAME: PROJECT_NAME + ".json",
        PATH: "." + PROJECT_NAME + ".json",
    },
    /**
     * This dotfile saves auth information. Should never be committed.
     * There are 2 types: personal & global:
     * - Global: In the $HOME directory.
     * - Personal: In the local directory.
     * @see {ClaspToken}
     */
    RC: {
        DIR: '~',
        LOCAL_DIR: './',
        NAME: PROJECT_NAME + "rc.json",
        LOCAL_PATH: "." + PROJECT_NAME + "rc.json",
        PATH: path_1.default.join('~', "." + PROJECT_NAME + "rc.json"),
        ABSOLUTE_PATH: path_1.default.join(os_1.default.homedir(), "." + PROJECT_NAME + "rc.json"),
        ABSOLUTE_LOCAL_PATH: path_1.default.join('.', "." + PROJECT_NAME + "rc.json"),
    },
};
// Methods for retrieving dotfiles.
exports.DOTFILE = {
    /**
     * Reads DOT.IGNORE.PATH to get a glob pattern of ignored paths.
     * @return {Promise<string[]>} A list of file glob patterns
     */
    IGNORE: function () {
        var projectPath = find_up_1.default.sync(exports.DOT.PROJECT.PATH);
        var ignoreDirectory = path_1.default.join(projectPath ? path_1.default.dirname(projectPath) : exports.DOT.PROJECT.DIR);
        return new Promise(function (resolve, reject) {
            if (fs_extra_1.default.existsSync(ignoreDirectory)
                && fs_extra_1.default.existsSync(exports.DOT.IGNORE.PATH)) {
                var buffer = strip_bom_1.default(fs_extra_1.default.readFileSync(exports.DOT.IGNORE.PATH, FS_OPTIONS));
                resolve(splitLines(buffer).filter(function (name) { return name; }));
            }
            else {
                var defaultClaspignore = [
                    '# ignore all files...',
                    '**/**',
                    '',
                    '# except the extensions...',
                    '!appsscript.json',
                    '!**/*.gs',
                    '!**/*.js',
                    '!**/*.ts',
                    '!**/*.html',
                    '',
                    '# ignore even valid files if in...',
                    '.git/**',
                    'node_modules/**',
                ];
                resolve(defaultClaspignore);
            }
        });
    },
    /**
     * Gets the closest DOT.PROJECT.NAME in the parent directory of the directory
     * that the command was run in.
     * @return {Dotf} A dotf with that dotfile. Null if there is no file
     */
    PROJECT: function () {
        var projectPath = find_up_1.default.sync(exports.DOT.PROJECT.PATH);
        return dotf(projectPath ? path_1.default.dirname(projectPath) : exports.DOT.PROJECT.DIR, exports.DOT.PROJECT.NAME);
    },
    // Stores {ClaspCredentials}
    RC: dotf(exports.DOT.RC.DIR, exports.DOT.RC.NAME),
    // Stores {ClaspCredentials}
    RC_LOCAL: function () {
        var localPath = find_up_1.default.sync(exports.DOT.PROJECT.PATH);
        return dotf(localPath ? path_1.default.dirname(localPath) : exports.DOT.RC.LOCAL_DIR, exports.DOT.RC.NAME);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG90ZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvdGZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7Ozs7QUFFSCwwQ0FBb0I7QUFDcEIsOENBQXdCO0FBQ3hCLG9EQUE2QjtBQUM3QixzREFBMEI7QUFHMUIsd0RBQWlDO0FBZWpDLElBQU0sSUFBSSxHQUFTLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQyxJQUFNLFVBQVUsR0FDQSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFdkMsa0NBQWtDO0FBQ2xDLDBDQUEwQztBQUMxQyxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUM7QUFFN0IsMkRBQTJEO0FBQzNELHNFQUFzRTtBQUN0RSxJQUFNLFVBQVUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQztBQVd4QyxnQkFBZ0I7QUFDSCxRQUFBLEdBQUcsR0FBRztJQUNqQjs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLEdBQUcsRUFBRSxHQUFHO1FBQ1IsSUFBSSxFQUFLLFlBQVksV0FBUTtRQUM3QixJQUFJLEVBQUUsTUFBSSxZQUFZLFdBQVE7S0FDL0I7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLEdBQUcsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDeEIsSUFBSSxFQUFLLFlBQVksVUFBTztRQUM1QixJQUFJLEVBQUUsTUFBSSxZQUFZLFVBQU87S0FDOUI7SUFDRDs7Ozs7O09BTUc7SUFDSCxFQUFFLEVBQUU7UUFDRixHQUFHLEVBQUUsR0FBRztRQUNSLFNBQVMsRUFBRSxJQUFJO1FBQ2YsSUFBSSxFQUFLLFlBQVksWUFBUztRQUM5QixVQUFVLEVBQUUsTUFBSSxZQUFZLFlBQVM7UUFDckMsSUFBSSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQUksWUFBWSxZQUFTLENBQUM7UUFDL0MsYUFB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