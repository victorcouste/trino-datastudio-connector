"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var auth_1 = require("../auth");
var files_1 = require("../files");
var inquirer_1 = require("../inquirer");
var urls_1 = require("../urls");
var utils_1 = require("../utils");
var status_1 = __importDefault(require("./status"));
/**
 * Fetches an Apps Script project.
 * Prompts the user if no script ID is provided.
 * @param scriptId {string} The Apps Script project ID or project URL to fetch.
 * @param versionNumber {string} An optional version to pull the script from.
 * @param cmd.rootDir {string} Specifies the local directory in which clasp will store your project files.
 *                    If not specified, clasp will default to the current directory.
 */
exports.default = (function (scriptId, versionNumber, cmd) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, rootDir, files;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _b.sent();
                if (files_1.hasProject())
                    utils_1.logError(null, utils_1.ERROR.FOLDER_EXISTS);
                if (!scriptId) return [3 /*break*/, 2];
                _a = urls_1.extractScriptId(scriptId);
                return [3 /*break*/, 4];
            case 2: return [4 /*yield*/, getScriptId()];
            case 3:
                _a = _b.sent();
                _b.label = 4;
            case 4:
                scriptId = _a;
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.CLONING);
                rootDir = cmd.rootDir;
                utils_1.saveProject({ scriptId: scriptId, rootDir: rootDir }, false);
                return [4 /*yield*/, files_1.fetchProject(scriptId, versionNumber)];
            case 5:
                files = _b.sent();
                return [4 /*yield*/, files_1.writeProjectFiles(files, rootDir)];
            case 6:
                _b.sent();
                return [4 /*yield*/, status_1.default()];
            case 7:
                _b.sent();
                return [2 /*return*/];
        }
    });
}); });
/**
 * Lists a user's AppsScripts and prompts them to choose one to clone.
 */
var getScriptId = function () { return __awaiter(void 0, void 0, void 0, function () {
    var list, data, files, fileIds, answers;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.drive.files.list({
                        // pageSize: 10,
                        // fields: 'files(id, name)',
                        orderBy: 'modifiedByMeTime desc',
                        q: 'mimeType="application/vnd.google-apps.script"',
                    })];
            case 2:
                list = _a.sent();
                data = list.data;
                if (!data)
                    utils_1.logError(list.statusText, 'Unable to use the Drive API.');
                files = data.files;
                if (!(files && files.length)) return [3 /*break*/, 4];
                fileIds = files.map(function (file) { return ({
                    name: file.name.padEnd(20) + " \u2013 " + utils_1.LOG.SCRIPT_LINK(file.id || ''),
                    value: file.id || '',
                }); });
                return [4 /*yield*/, inquirer_1.scriptIdPrompt(fileIds)];
            case 3:
                answers = _a.sent();
                return [2 /*return*/, answers.scriptId];
            case 4: return [2 /*return*/, utils_1.logError(null, utils_1.LOG.FINDING_SCRIPTS_DNE)];
        }
    });
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdDQUFvRDtBQUNwRCxrQ0FBdUU7QUFDdkUsd0NBQTZEO0FBQzdELGdDQUEwQztBQUMxQyxrQ0FBcUY7QUFDckYsb0RBQThCO0FBRTlCOzs7Ozs7O0dBT0c7QUFDSCxtQkFBZSxVQUFPLFFBQWdCLEVBQUUsYUFBcUIsRUFBRSxHQUF3Qjs7OztvQkFDckYscUJBQU0scUJBQWEsRUFBRSxFQUFBOztnQkFBckIsU0FBcUIsQ0FBQztnQkFDdEIsSUFBSSxrQkFBVSxFQUFFO29CQUFFLGdCQUFRLENBQUMsSUFBSSxFQUFFLGFBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztxQkFDM0MsUUFBUSxFQUFSLHdCQUFRO2dCQUFHLEtBQUEsc0JBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQTs7b0JBQUcscUJBQU0sV0FBVyxFQUFFLEVBQUE7O2dCQUFuQixLQUFBLFNBQW1CLENBQUE7OztnQkFBckUsUUFBUSxLQUE2RCxDQUFDO2dCQUN0RSxlQUFPLENBQUMsZUFBZSxDQUFDLFdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDL0IsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7Z0JBQzVCLG1CQUFXLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixxQkFBTSxvQkFBWSxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFBQTs7Z0JBQW5ELEtBQUssR0FBRyxTQUEyQztnQkFDekQscUJBQU0seUJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUFBOztnQkFBdkMsU0FBdUMsQ0FBQztnQkFDeEMscUJBQU0sZ0JBQU0sRUFBRSxFQUFBOztnQkFBZCxTQUFjLENBQUM7Ozs7S0FDaEIsRUFBQztBQUVGOztHQUVHO0FBQ0gsSUFBTSxXQUFXLEdBQUc7Ozs7b0JBQ2xCLHFCQUFNLHlCQUFrQixFQUFFLEVBQUE7O2dCQUExQixTQUEwQixDQUFDO2dCQUNkLHFCQUFNLFlBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO3dCQUNsQyxnQkFBZ0I7d0JBQ2hCLDZCQUE2Qjt3QkFDN0IsT0FBTyxFQUFFLHVCQUF1Qjt3QkFDaEMsQ0FBQyxFQUFFLCtDQUErQztxQkFDbkQsQ0FBQyxFQUFBOztnQkFMSSxJQUFJLEdBQUcsU0FLWDtnQkFDSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDdkIsSUFBSSxDQUFDLElBQUk7b0JBQUUsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLDhCQUE4QixDQUFDLENBQUM7Z0JBQy9ELEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO3FCQUNyQixDQUFBLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFBLEVBQXJCLHdCQUFxQjtnQkFDakIsT0FBTyxHQUFxQixLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsQ0FBQztvQkFDbkQsSUFBSSxFQUFLLElBQUksQ0FBQyxJQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxnQkFBTSxXQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFHO29CQUNwRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFO2lCQUNyQixDQUFDLEVBSGtELENBR2xELENBQUMsQ0FBQztnQkFDWSxxQkFBTSx5QkFBYyxDQUFDLE9BQU8sQ0FBQyxFQUFBOztnQkFBdkMsT0FBTyxHQUFHLFNBQTZCO2dCQUM3QyxzQkFBTyxPQUFPLENBQUMsUUFBUSxFQUFDO29CQUUxQixzQkFBTyxnQkFBUSxDQUFDLElBQUksRUFBRSxXQUFHLENBQUMsbUJBQW1CLENBQUMsRUFBQzs7O0tBQ2hELENBQUMifQ==