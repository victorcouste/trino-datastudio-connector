"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
/**
 * Gets or sets a setting in .clasp.json
 * @param {keyof ProjectSettings} settingKey The key to set
 * @param {string?} settingValue Optional value to set the key to
 */
exports.default = (function (settingKey, settingValue) { return __awaiter(void 0, void 0, void 0, function () {
    var currentSettings, keyValue, currentValue, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.getProjectSettings()];
            case 1:
                currentSettings = _a.sent();
                // Display all settings if ran `clasp setting`.
                if (!settingKey) {
                    console.log(currentSettings);
                    return [2 /*return*/];
                }
                if (!!settingValue) return [3 /*break*/, 2];
                if (settingKey in currentSettings) {
                    keyValue = currentSettings[settingKey];
                    if (Array.isArray(keyValue)) {
                        keyValue = keyValue.toString();
                    }
                    else if (typeof keyValue !== 'string') {
                        keyValue = '';
                    }
                    // We don't use console.log as it automatically adds a new line
                    // Which interfers with storing the value
                    process.stdout.write(keyValue);
                }
                else {
                    utils_1.logError(null, utils_1.ERROR.UNKNOWN_KEY(settingKey));
                }
                return [3 /*break*/, 6];
            case 2:
                _a.trys.push([2, 5, , 6]);
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 3:
                currentSettings = _a.sent();
                currentValue = settingKey in currentSettings ? currentSettings[settingKey] : '';
                switch (settingKey) {
                    case 'scriptId':
                        currentSettings.scriptId = settingValue;
                        break;
                    case 'rootDir':
                        currentSettings.rootDir = settingValue;
                        break;
                    case 'projectId':
                        currentSettings.projectId = settingValue;
                        break;
                    case 'fileExtension':
                        currentSettings.fileExtension = settingValue;
                        break;
                    default:
                        utils_1.logError(null, utils_1.ERROR.UNKNOWN_KEY(settingKey));
                }
                // filePushOrder doesn't work since it requires an array.
                // const filePushOrder = settingKey === 'filePushOrder' ? settingValue : currentSettings.filePushOrder;
                return [4 /*yield*/, utils_1.saveProject(currentSettings, true)];
            case 4:
                // filePushOrder doesn't work since it requires an array.
                // const filePushOrder = settingKey === 'filePushOrder' ? settingValue : currentSettings.filePushOrder;
                _a.sent();
                console.log("Updated \"" + settingKey + "\": \"" + currentValue + "\" \u2192 \"" + settingValue + "\"");
                return [3 /*break*/, 6];
            case 5:
                e_1 = _a.sent();
                utils_1.logError(null, 'Unable to update .clasp.json');
                return [3 /*break*/, 6];
            case 6: return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNldHRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxrQ0FBNEU7QUFFNUU7Ozs7R0FJRztBQUNILG1CQUFlLFVBQU8sVUFBa0MsRUFBRSxZQUFxQjs7OztvQkFDdkQscUJBQU0sMEJBQWtCLEVBQUUsRUFBQTs7Z0JBQTVDLGVBQWUsR0FBRyxTQUEwQjtnQkFFaEQsK0NBQStDO2dCQUMvQyxJQUFJLENBQUMsVUFBVSxFQUFFO29CQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7b0JBQzdCLHNCQUFPO2lCQUNSO3FCQUdHLENBQUMsWUFBWSxFQUFiLHdCQUFhO2dCQUNmLElBQUksVUFBVSxJQUFJLGVBQWUsRUFBRTtvQkFDN0IsUUFBUSxHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDM0MsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO3dCQUMzQixRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO3FCQUNoQzt5QkFBTSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTt3QkFDdkMsUUFBUSxHQUFHLEVBQUUsQ0FBQztxQkFDZjtvQkFDRCwrREFBK0Q7b0JBQy9ELHlDQUF5QztvQkFDekMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ2hDO3FCQUFNO29CQUNMLGdCQUFRLENBQUMsSUFBSSxFQUFFLGFBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztpQkFDL0M7Ozs7Z0JBR21CLHFCQUFNLDBCQUFrQixFQUFFLEVBQUE7O2dCQUE1QyxlQUFlLEdBQUcsU0FBMEIsQ0FBQztnQkFDdkMsWUFBWSxHQUFHLFVBQVUsSUFBSSxlQUFlLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN0RixRQUFRLFVBQVUsRUFBRTtvQkFDbEIsS0FBSyxVQUFVO3dCQUNiLGVBQWUsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO3dCQUN4QyxNQUFNO29CQUNSLEtBQUssU0FBUzt3QkFDWixlQUFlLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQzt3QkFDdkMsTUFBTTtvQkFDUixLQUFLLFdBQVc7d0JBQ2QsZUFBZSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7d0JBQ3pDLE1BQU07b0JBQ1IsS0FBSyxlQUFlO3dCQUNsQixlQUFlLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQzt3QkFDN0MsTUFBTTtvQkFDUjt3QkFDRSxnQkFBUSxDQUFDLElBQUksRUFBRSxhQUFLLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7aUJBQ2pEO2dCQUNELHlEQUF5RDtnQkFDekQsdUdBQXVHO2dCQUN2RyxxQkFBTSxtQkFBVyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBQTs7Z0JBRnhDLHlEQUF5RDtnQkFDekQsdUdBQXVHO2dCQUN2RyxTQUF3QyxDQUFDO2dCQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQVksVUFBVSxjQUFPLFlBQVksb0JBQVEsWUFBWSxPQUFHLENBQUMsQ0FBQzs7OztnQkFFOUUsZ0JBQVEsQ0FBQyxJQUFJLEVBQUUsOEJBQThCLENBQUMsQ0FBQzs7Ozs7S0FHcEQsRUFBQyJ9