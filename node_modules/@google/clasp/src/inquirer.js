"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var inquirer_1 = require("inquirer");
var apis_1 = require("./apis");
var utils_1 = require("./utils");
inquirer_1.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));
/**
 * Inquirer prompt for a functionName.
 * @returns {Promise<{ functionName: string }>} A promise for an object with the `functionName` property.
 */
exports.functionNamePrompt = function (source) {
    var question = {
        name: 'functionName',
        message: 'Select a functionName',
        type: 'autocomplete',
        source: source,
    };
    return inquirer_1.prompt([question]);
};
/**
 * Inquirer prompt for a deployment Id.
 * @param {DeploymentIdPrompt[]} choices An array of `DeploymentIdPrompt` objects.
 * @returns {Promise<{ deploymentId: string }>} A promise for an object with the `deploymentId` property.
 */
exports.deploymentIdPrompt = function (choices) {
    return inquirer_1.prompt([{
            choices: choices,
            message: 'Open which deployment?',
            name: 'deployment',
            type: 'list',
        }]);
};
/**
 * Inquirer prompt for a project description.
 * @returns {Promise<{ description: string }>} A promise for an object with the `description` property.
 */
exports.descriptionPrompt = function () { return inquirer_1.prompt([{
        default: '',
        message: utils_1.LOG.GIVE_DESCRIPTION,
        name: 'description',
        type: 'input',
    }]); };
/**
 * Inquirer prompt for oauth scopes.
 * @returns {Promise<PromptAnswers>} A promise for an object with the `PromptAnswers` interface.
 */
exports.oauthScopesPrompt = function () { return inquirer_1.prompt([{
        message: 'Authorize new scopes?',
        name: 'doAuth',
        type: 'confirm',
    }, {
        message: 'Use localhost?',
        name: 'localhost',
        type: 'confirm',
        when: function (answers) {
            return answers.doAuth;
        },
    }]); };
/**
 * Inquirer prompt for overwriting a manifest.
 * @returns {Promise<{ overwrite: boolean }>} A promise for an object with the `overwrite` property.
 */
exports.overwritePrompt = function () { return inquirer_1.prompt([{
        default: false,
        message: 'Manifest file has been updated. Do you want to push and overwrite?',
        name: 'overwrite',
        type: 'confirm',
    }]); };
/**
 * Inquirer prompt for project Id.
 * @returns {Promise<{ projectId: string }>} A promise for an object with the `projectId` property.
 */
exports.projectIdPrompt = function () { return inquirer_1.prompt([{
        message: "" + utils_1.LOG.ASK_PROJECT_ID,
        name: 'projectId',
        type: 'input',
    }]); };
/**
 * Inquirer prompt for script Id.
 * @param {ScriptIdPrompt[]} fileIds An array of `ScriptIdPrompt` objects.
 * @returns {Promise<{scriptId: string;}>} A promise for an object with the `scriptId` property.
 */
exports.scriptIdPrompt = function (fileIds) { return inquirer_1.prompt([
    {
        choices: fileIds,
        message: utils_1.LOG.CLONE_SCRIPT_QUESTION,
        name: 'scriptId',
        pageSize: 30,
        type: 'list',
    },
]); };
/**
 * Inquirer prompt for script type.
 * @returns {Promise<{ type: string }>} A promise for an object with the `type` property.
 */
exports.scriptTypePrompt = function () { return inquirer_1.prompt([{
        choices: Object.keys(apis_1.SCRIPT_TYPES).map(function (key) { return apis_1.SCRIPT_TYPES[key]; }),
        message: utils_1.LOG.CREATE_SCRIPT_QUESTION,
        name: 'type',
        type: 'list',
    }]); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5xdWlyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnF1aXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHFDQUFrRDtBQUNsRCwrQkFBc0M7QUFDdEMsaUNBQThCO0FBRTlCLHlCQUFjLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7QUFLeEU7OztHQUdHO0FBQ1UsUUFBQSxrQkFBa0IsR0FBRyxVQUFDLE1BQTBCO0lBQzNELElBQU0sUUFBUSxHQUFHO1FBQ2YsSUFBSSxFQUFFLGNBQWM7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLFFBQUE7S0FDUCxDQUFDO0lBQ0YsT0FBTyxpQkFBTSxDQUEyQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQyxDQUFDO0FBT0Y7Ozs7R0FJRztBQUNVLFFBQUEsa0JBQWtCLEdBQUcsVUFBQyxPQUE2QjtJQUM5RCxPQUFBLGlCQUFNLENBQThDLENBQUM7WUFDbkQsT0FBTyxTQUFBO1lBQ1AsT0FBTyxFQUFFLHdCQUF3QjtZQUNqQyxJQUFJLEVBQUUsWUFBWTtZQUNsQixJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUMsQ0FBQztBQUxILENBS0csQ0FBQztBQUVOOzs7R0FHRztBQUNVLFFBQUEsaUJBQWlCLEdBQUcsY0FBTSxPQUFBLGlCQUFNLENBQTBCLENBQUM7UUFDdEUsT0FBTyxFQUFFLEVBQUU7UUFDWCxPQUFPLEVBQUUsV0FBRyxDQUFDLGdCQUFnQjtRQUM3QixJQUFJLEVBQUUsYUFBYTtRQUNuQixJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsQ0FBQyxFQUxvQyxDQUtwQyxDQUFDO0FBT0o7OztHQUdHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBRyxjQUFNLE9BQUEsaUJBQU0sQ0FBZ0IsQ0FBQztRQUM1RCxPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxRQUFRO1FBQ2QsSUFBSSxFQUFFLFNBQVM7S0FDaEIsRUFBRTtRQUNELE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLFdBQVc7UUFDakIsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsVUFBQyxPQUFzQjtZQUMzQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDeEIsQ0FBQztLQUNGLENBQUMsQ0FBQyxFQVhvQyxDQVdwQyxDQUFDO0FBRUo7OztHQUdHO0FBQ1UsUUFBQSxlQUFlLEdBQUcsY0FBTSxPQUFBLGlCQUFNLENBQXlCLENBQUM7UUFDbkUsT0FBTyxFQUFFLEtBQUs7UUFDZCxPQUFPLEVBQUUsb0VBQW9FO1FBQzdFLElBQUksRUFBRSxXQUFXO1FBQ2pCLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUMsQ0FBQyxFQUxrQyxDQUtsQyxDQUFDO0FBRUo7OztHQUdHO0FBQ1UsUUFBQSxlQUFlLEdBQUcsY0FBTSxPQUFBLGlCQUFNLENBQXdCLENBQUM7UUFDbEUsT0FBTyxFQUFFLEtBQUcsV0FBRyxDQUFDLGNBQWdCO1FBQ2hDLElBQUksRUFBRSxXQUFXO1FBQ2pCLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQyxDQUFDLEVBSmtDLENBSWxDLENBQUM7QUFPSjs7OztHQUlHO0FBQ1UsUUFBQSxjQUFjLEdBQUcsVUFBQyxPQUF5QixJQUFLLE9BQUEsaUJBQU0sQ0FBdUI7SUFDeEY7UUFDRSxPQUFPLEVBQUUsT0FBTztRQUNoQixPQUFPLEVBQUUsV0FBRyxDQUFDLHFCQUFxQjtRQUNsQyxJQUFJLEVBQUUsVUFBVTtRQUNoQixRQUFRLEVBQUUsRUFBRTtRQUNaLElBQUksRUFBRSxNQUFNO0tBQ2I7Q0FDRixDQUFDLEVBUjJELENBUTNELENBQUM7QUFFSDs7O0dBR0c7QUFDVSxRQUFBLGdCQUFnQixHQUFHLGNBQU0sT0FBQSxpQkFBTSxDQUFtQixDQUFDO1FBQzlELE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxtQkFBWSxDQUFDLEdBQWdDLENBQUMsRUFBOUMsQ0FBOEMsQ0FBQztRQUMvRixPQUFPLEVBQUUsV0FBRyxDQUFDLHNCQUFzQjtRQUNuQyxJQUFJLEVBQUUsTUFBTTtRQUNaLElBQUksRUFBRSxNQUFNO0tBQ2IsQ0FBQyxDQUFDLEVBTG1DLENBS25DLENBQUMifQ==