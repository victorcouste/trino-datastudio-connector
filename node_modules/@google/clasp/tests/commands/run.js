"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var functions_1 = require("../functions");
var mocha_1 = require("mocha");
var utils_1 = require("../../src/utils");
var chai_1 = require("chai");
var fs_extra_1 = __importDefault(require("fs-extra"));
var child_process_1 = require("child_process");
mocha_1.describe('Test clasp run function', function () {
    before(functions_1.setup);
    mocha_1.it('should properly run in dev mode', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['run'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.include('Running in dev mode.');
    });
    mocha_1.it('should not run in dev mode', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['run', '--nondev'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.not.include('Running in dev mode.');
    });
    mocha_1.it('should prompt for which function to run', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['run'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.not.include('Select a functionName.');
    });
    mocha_1.it('should not prompt for which function to run', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['run', '\'sendEmail\''], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.not.include('Select a functionName.');
    });
    // These tests will remain skipped until they can be fixed.
    // TODO: this test needs to be updated
    mocha_1.it.skip('should prompt for project ID', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['run', 'myFunction'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_1.LOG.ASK_PROJECT_ID);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should prompt to set up new OAuth client', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.settingsLocal, constants_1.CLASP_SETTINGS.invalid);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['run', 'myFunction'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.settingsLocal);
        chai_1.expect(result.stdout)
            .to.contain('https://console.developers.google.com/apis/credentials?project=');
        chai_1.expect(result.stderr).to.equal('');
        chai_1.expect(result.status).to.equal(0);
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMENBQWtFO0FBQ2xFLDBDQUE4QztBQUM5QywrQkFBcUM7QUFFckMseUNBQXNDO0FBQ3RDLDZCQUE4QjtBQUM5QixzREFBMEI7QUFDMUIsK0NBQTBDO0FBRTFDLGdCQUFRLENBQUMseUJBQXlCLEVBQUU7SUFDbEMsTUFBTSxDQUFDLGlCQUFLLENBQUMsQ0FBQztJQUNkLFVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtRQUNwQyxJQUFNLE1BQU0sR0FBRyx5QkFBUyxDQUN0QixpQkFBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQ3JDLENBQUM7UUFDRixhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUNILFVBQUUsQ0FBQyw0QkFBNEIsRUFBRTtRQUMvQixJQUFNLE1BQU0sR0FBRyx5QkFBUyxDQUN0QixpQkFBSyxFQUFFLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUNqRCxDQUFDO1FBQ0YsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ0gsVUFBRSxDQUFDLHlDQUF5QyxFQUFFO1FBQzVDLElBQU0sTUFBTSxHQUFHLHlCQUFTLENBQ3RCLGlCQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FDckMsQ0FBQztRQUNGLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUMsQ0FBQztJQUNILFVBQUUsQ0FBQyw2Q0FBNkMsRUFBRTtRQUNoRCxJQUFNLE1BQU0sR0FBRyx5QkFBUyxDQUN0QixpQkFBSyxFQUFFLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUN0RCxDQUFDO1FBQ0YsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBRUgsMkRBQTJEO0lBQzNELHNDQUFzQztJQUN0QyxVQUFFLENBQUMsSUFBSSxDQUFDLDhCQUE4QixFQUFFO1FBQ3RDLElBQU0sTUFBTSxHQUFHLHlCQUFTLENBQ3RCLGlCQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQ25ELENBQUM7UUFDRixhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ0gsc0NBQXNDO0lBQ3RDLFVBQUUsQ0FBQyxJQUFJLENBQUMsMENBQTBDLEVBQUU7UUFDbEQsa0JBQUUsQ0FBQyxhQUFhLENBQUMsdUJBQVcsQ0FBQyxhQUFhLEVBQUUsMEJBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxJQUFNLE1BQU0sR0FBRyx5QkFBUyxDQUN0QixpQkFBSyxFQUFFLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUNuRCxDQUFDO1FBQ0Ysa0JBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN6QyxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUNsQixFQUFFLENBQUMsT0FBTyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7UUFDL0UsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQyxtQkFBTyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMifQ==