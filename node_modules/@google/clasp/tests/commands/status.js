"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var functions_1 = require("../functions");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var child_process_1 = require("child_process");
mocha_1.describe('Test clasp status function', function () {
    before(functions_1.setup);
    mocha_1.it('should respect globs and negation rules', function () {
        var tmpdir = functions_1.setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234" }' },
            { file: '.claspignore', data: '**/**\n!build/main.js\n!appsscript.json' },
            { file: 'build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.clasp.json',
            '.claspignore',
            'should/alsoBeIgnored',
            'shouldBeIgnored',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['build/main.js', 'appsscript.json']);
        chai_1.expect(result.stderr).to.equal('');
        chai_1.expect(result.status).to.equal(0);
        // TODO: cleanup by del/rimraf tmpdir
    });
    mocha_1.it('should ignore dotfiles if the parent folder is ignored', function () {
        var tmpdir = functions_1.setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234" }' },
            { file: '.claspignore', data: '**/node_modules/**\n**/**\n!appsscript.json' },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'node_modules/fsevents/build/Release/.deps/Release/.node.d', data: constants_1.TEST_CODE_JS },
        ]);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.clasp.json',
            '.claspignore',
            'node_modules/fsevents/build/Release/.deps/Release/.node.d',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['appsscript.json']);
        chai_1.expect(result.stderr).to.equal('');
        chai_1.expect(result.status).to.equal(0);
        // TODO: cleanup by del/rimraf tmpdir
    });
    mocha_1.it('should respect globs and negation rules when rootDir given', function () {
        var tmpdir = functions_1.setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234", "rootDir":"dist" }' },
            { file: '.claspignore', data: '**/**\n!build/main.js\n!appsscript.json' },
            { file: 'dist/build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'dist/appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'dist/shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'dist/should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            'dist/should/alsoBeIgnored',
            'dist/shouldBeIgnored'
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['dist/build/main.js', 'dist/appsscript.json']);
        chai_1.expect(result.stderr).to.equal('');
        chai_1.expect(result.status).to.equal(0);
        // TODO: cleanup by del/rimraf tmpdir
    });
    mocha_1.it('should respect globs and negation rules when relative rootDir given', function () {
        var tmpdir = functions_1.setupTmpDirectory([
            { file: 'src/.clasp.json', data: '{ "scriptId":"1234", "rootDir":"../build" }' },
            { file: 'src/.claspignore', data: '**/**\n!main.js\n!appsscript.json' },
            { file: 'build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'build/appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'build/shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'build/should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir + '/src' });
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '../build/should/alsoBeIgnored',
            '../build/shouldBeIgnored'
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['../build/main.js', '../build/appsscript.json']);
        chai_1.expect(result.stderr).to.equal('');
        chai_1.expect(result.status).to.equal(0);
        // TODO: cleanup by del/rimraf tmpdir
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMENBQXVGO0FBQ3ZGLDBDQUFpRTtBQUNqRSwrQkFBcUM7QUFFckMsNkJBQThCO0FBQzlCLCtDQUEwQztBQUUxQyxnQkFBUSxDQUFDLDRCQUE0QixFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxpQkFBSyxDQUFDLENBQUM7SUFDZCxVQUFFLENBQUMseUNBQXlDLEVBQUU7UUFDNUMsSUFBTSxNQUFNLEdBQUcsNkJBQWlCLENBQUM7WUFDL0IsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSx1QkFBdUIsRUFBRTtZQUN0RCxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLHlDQUF5QyxFQUFFO1lBQ3pFLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsd0JBQVksRUFBRTtZQUM3QyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsZ0RBQW9DLEVBQUU7WUFDdkUsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLHdCQUFZLEVBQUU7WUFDL0MsRUFBRSxJQUFJLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxFQUFFLHdCQUFZLEVBQUU7U0FDckQsQ0FBQyxDQUFDO1FBQ0gsSUFBTSxNQUFNLEdBQUcseUJBQVMsQ0FBQyxpQkFBSyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN6RixJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxhQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2hELGFBQWE7WUFDYixj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