"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var utils_1 = require("../../src/utils");
var functions_1 = require("../functions");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var fs_extra_1 = __importDefault(require("fs-extra"));
var child_process_1 = require("child_process");
mocha_1.describe('Test clasp login function', function () {
    before(functions_1.setup);
    beforeEach(functions_1.backupSettings);
    afterEach(functions_1.restoreSettings);
    mocha_1.it('should exit(0) with LOG.DEFAULT_CREDENTIALS for default login (no global or local rc)', function () {
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcGlobal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcLocal);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_1.LOG.LOGIN(false));
        chai_1.expect(result.stderr).to.equal('');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should exit(0) ERROR.LOGGED_IN if global rc and no --creds option but continue to login', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.LOGGED_IN_GLOBAL);
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should exit(1) with ERROR.LOGGED_IN if local rc and --creds option', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.rcLocal, constants_1.FAKE_CLASPRC.local);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcLocal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.LOGGED_IN_LOCAL);
        chai_1.expect(result.status).to.equal(1);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should exit(1) with ERROR.CREDENTIALS_DNE if --creds file does not exist', function () {
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.clientCredsLocal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.CREDENTIALS_DNE(constants_1.CLASP_PATHS.clientCredsLocal));
        chai_1.expect(result.status).to.equal(1);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should exit(1) with ERROR.BAD_CREDENTIALS_FILE if --creds file invalid', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, constants_1.CLIENT_CREDS.invalid);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should exit(0) with ERROR.BAD_CREDENTIALS_FILE if --creds file corrupt json', function () {
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, functions_1.rndStr());
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it('should exit(1) with LOG.CREDS_FROM_PROJECT if global rc and --creds file valid', function () {
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcLocal);
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        fs_extra_1.default.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, constants_1.CLIENT_CREDS.fake);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stdout).to.contain(utils_1.LOG.LOGIN(true));
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBDQUE4RTtBQUM5RSx5Q0FBNkM7QUFDN0MsMENBQXVGO0FBQ3ZGLCtCQUFxQztBQUVyQyw2QkFBOEI7QUFDOUIsc0RBQTBCO0FBQzFCLCtDQUEwQztBQUUxQyxnQkFBUSxDQUFDLDJCQUEyQixFQUFFO0lBQ3BDLE1BQU0sQ0FBQyxpQkFBSyxDQUFDLENBQUM7SUFDZCxVQUFVLENBQUMsMEJBQWMsQ0FBQyxDQUFDO0lBQzNCLFNBQVMsQ0FBQywyQkFBZSxDQUFDLENBQUM7SUFDM0IsVUFBRSxDQUFDLHVGQUF1RixFQUFFO1FBQzFGLElBQUksa0JBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQVcsQ0FBQyxRQUFRLENBQUM7WUFBRSxrQkFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdFLElBQUksa0JBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQVcsQ0FBQyxPQUFPLENBQUM7WUFBRSxrQkFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNFLElBQU0sTUFBTSxHQUFHLHlCQUFTLENBQ3RCLGlCQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FDekQsQ0FBQztRQUNGLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkQsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxD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