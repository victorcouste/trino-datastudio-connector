"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var chai_1 = require("chai");
var fs_extra_1 = __importDefault(require("fs-extra"));
var mocha_1 = require("mocha");
var constants_1 = require("../constants");
var functions_1 = require("../functions");
mocha_1.describe('Test clasp push function', function () {
    before(functions_1.setup);
    mocha_1.it('should push local project correctly', function () {
        fs_extra_1.default.writeFileSync('Code.js', constants_1.TEST_CODE_JS);
        fs_extra_1.default.writeFileSync('.claspignore', '**/**\n!Code.js\n!appsscript.json');
        var result = child_process_1.spawnSync(constants_1.CLASP, ['push'], { encoding: 'utf8', input: 'y' });
        chai_1.expect(result.stdout).to.contain('Pushed');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.stderr).to.equal('');
        chai_1.expect(result.status).to.equal(0);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should return non-0 exit code when push failed', function () {
        fs_extra_1.default.writeFileSync('.claspignore', '**/**\n!Code.js\n!appsscript.json\n!unexpected_file');
        fs_extra_1.default.writeFileSync('unexpected_file', constants_1.TEST_CODE_JS);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['push'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Invalid value at');
        chai_1.expect(result.stderr).to.contain('UNEXPECTED_FILE');
        chai_1.expect(result.stderr).to.contain('Files to push were:');
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp push with no `.claspignore`', function () {
    mocha_1.it('should push local project correctly', function () {
        var tmpdir = functions_1.setupTmpDirectory([
            { file: '.clasp.json', data: constants_1.CLASP_SETTINGS.valid },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API },
            { file: 'Code.js', data: constants_1.TEST_CODE_JS },
            { file: 'page.html', data: constants_1.TEST_PAGE_HTML },
        ]);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['push'], {
            encoding: 'utf8',
            cwd: tmpdir,
            input: 'y',
        });
        chai_1.expect(result.stdout).to.contain('Pushed');
        chai_1.expect(result.stdout).to.contain('Code.js');
        chai_1.expect(result.stdout).to.contain('page.html');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.stderr).to.equal('');
        chai_1.expect(result.status).to.equal(0);
        // TODO: cleanup by del/rimraf tmpdir
    });
    before(functions_1.setup);
    // TODO: this test needs to be updated
    mocha_1.it.skip('should return non-0 exit code when push failed', function () {
        fs_extra_1.default.writeFileSync('unexpected_file', constants_1.TEST_CODE_JS);
        var result = child_process_1.spawnSync(constants_1.CLASP, ['push'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Invalid value at');
        chai_1.expect(result.stderr).to.contain('UNEXPECTED_FILE');
        chai_1.expect(result.stderr).to.contain('Files to push were:');
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInB1c2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQ0FBMEM7QUFDMUMsNkJBQThCO0FBQzlCLHNEQUEwQjtBQUMxQiwrQkFBcUM7QUFDckMsMENBTXNCO0FBQ3RCLDBDQUFpRTtBQUVqRSxnQkFBUSxDQUFDLDBCQUEwQixFQUFFO0lBQ25DLE1BQU0sQ0FBQyxpQkFBSyxDQUFDLENBQUM7SUFDZCxVQUFFLENBQUMscUNBQXFDLEVBQUU7UUFDeEMsa0JBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLHdCQUFZLENBQUMsQ0FBQztRQUMxQyxrQkFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztRQUN0RSxJQUFNLE1BQU0sR0FBRyx5QkFBUyxDQUN0QixpQkFBSyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FDbEQsQ0FBQztRQUNGLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNILHNDQUFzQztJQUN0QyxVQUFFLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxFQUFFO1FBQ3hELGtCQUFFLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxx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