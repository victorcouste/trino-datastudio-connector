"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var tmp_1 = __importDefault(require("tmp"));
/** basic cleanup after tests */
exports.cleanup = function () {
    fs_extra_1.default.removeSync('.clasp.json');
    fs_extra_1.default.removeSync('.claspignore');
    fs_extra_1.default.removeSync('Code.js');
    fs_extra_1.default.removeSync('appsscript.json');
};
/** basic setup for tests */
exports.setup = function () {
    fs_extra_1.default.writeFileSync('.clasp.json', constants_1.CLASP_SETTINGS.valid);
    fs_extra_1.default.writeFileSync('appsscript.json', constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API);
};
/** setup for tests not using the run API */
exports.setupWithoutGCPProject = function () {
    fs_extra_1.default.writeFileSync('.clasp.json', constants_1.CLASP_SETTINGS.validWithoutProjectId);
    fs_extra_1.default.writeFileSync('appsscript.json', constants_1.TEST_APPSSCRIPT_JSON_WITHOUT_RUN_API);
};
/** setup for tests using the run API */
exports.setupWithRunManifest = function () {
    fs_extra_1.default.writeFileSync('.clasp.json', constants_1.CLASP_SETTINGS.valid);
    fs_extra_1.default.writeFileSync('appsscript.json', constants_1.TEST_APPSSCRIPT_JSON_WITH_RUN_API);
};
/** produce a pseudo random string */
exports.rndStr = function () { return Math.random().toString(36).substr(2); };
/**
 * backup clasp settings. Use `restoreSettings()` to restore these.
 */
exports.backupSettings = function () {
    if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcGlobal)) {
        fs_extra_1.default.copyFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.CLASP_PATHS.rcGlobal + "~");
    }
    if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcLocal)) {
        fs_extra_1.default.copyFileSync(constants_1.CLASP_PATHS.rcLocal, constants_1.CLASP_PATHS.rcLocal + "~");
    }
    if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.settingsLocal)) {
        fs_extra_1.default.copyFileSync(constants_1.CLASP_PATHS.settingsLocal, constants_1.CLASP_PATHS.settingsLocal + "~");
    }
};
/**
 * restore clasp settings backuped up using `backupSettings()`
 */
exports.restoreSettings = function () {
    if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcGlobal + "~")) {
        fs_extra_1.default.renameSync(constants_1.CLASP_PATHS.rcGlobal + "~", constants_1.CLASP_PATHS.rcGlobal);
    }
    if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcLocal + "~")) {
        fs_extra_1.default.renameSync(constants_1.CLASP_PATHS.rcLocal + "~", constants_1.CLASP_PATHS.rcLocal);
    }
    if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.settingsLocal + "~")) {
        fs_extra_1.default.renameSync(constants_1.CLASP_PATHS.settingsLocal + "~", constants_1.CLASP_PATHS.settingsLocal);
    }
};
/**
 * create a temporary directory and its content, then return its path as a string
 *
 * @param {Array<{ file: string, data: string }} filepathsAndContents directory content (files)
 */
function setupTmpDirectory(filepathsAndContents) {
    fs_extra_1.default.ensureDirSync('tmp');
    var tmpdir = tmp_1.default.dirSync({ unsafeCleanup: true, dir: 'tmp/', keep: false }).name;
    filepathsAndContents.forEach(function (_a) {
        var file = _a.file, data = _a.data;
        fs_extra_1.default.outputFileSync(path_1.default.join(tmpdir, file), data);
    });
    return tmpdir;
}
exports.setupTmpDirectory = setupTmpDirectory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUNBS3FCO0FBRXJCLHNEQUEwQjtBQUMxQiw4Q0FBd0I7QUFDeEIsNENBQXNCO0FBRXRCLGdDQUFnQztBQUNuQixRQUFBLE9BQU8sR0FBRztJQUNyQixrQkFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QixrQkFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM5QixrQkFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QixrQkFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQztBQUVGLDRCQUE0QjtBQUNmLFFBQUEsS0FBSyxHQUFHO0lBQ25CLGtCQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSwwQkFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELGtCQUFFLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFLGdEQUFvQyxDQUFDLENBQUM7QUFDNUUsQ0FBQyxDQUFDO0FBRUYsNENBQTRDO0FBQy9CLFFBQUEsc0JBQXNCLEdBQUc7SUFDcEMsa0JBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLDBCQUFjLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN0RSxrQkFBRSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFBRSxnREFBb0MsQ0FBQyxDQUFDO0FBQzVFLENBQUMsQ0FBQztBQUVGLHdDQUF3QztBQUMzQixRQUFBLG9CQUFvQixHQUFHO0lBQ2xDLGtCQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSwwQkFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELGtCQUFFLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFLDZDQUFpQyxDQUFDLENBQUM7QUFDekUsQ0FBQyxDQUFDO0FBRUYscUNBQXFDO0FB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