"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
var utils_1 = require("../src/utils");
var urls_1 = require("../src/urls");
var functions_1 = require("./functions");
var mocha_1 = require("mocha");
var files_1 = require("../src/files");
var chai_1 = require("chai");
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var child_process_1 = require("child_process");
mocha_1.describe.skip('Test --help for each function', function () {
    var expectHelp = function (command, expected) {
        var result = child_process_1.spawnSync(constants_1.CLASP, [command, '--help'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(expected);
    };
    mocha_1.it('should run --help', function () { return expectHelp('run', 'Run a function in your Apps Scripts project'); });
    mocha_1.it('should logs --help', function () { return expectHelp('logs', 'Shows the StackDriver logs'); });
    mocha_1.it('should login --help', function () { return expectHelp('login', 'Log in to script.google.com'); });
    mocha_1.it('should logout --help', function () { return expectHelp('logout', 'Log out'); });
    mocha_1.it('should create --help', function () { return expectHelp('create', 'Create a script'); });
    mocha_1.it('should clone --help', function () { return expectHelp('clone', 'Clone a project'); });
    mocha_1.it('should pull --help', function () { return expectHelp('pull', 'Fetch a remote project'); });
    mocha_1.it('should push --help', function () { return expectHelp('push', 'Update the remote project'); });
    mocha_1.it('should status --help', function () { return expectHelp('status', 'Lists files that will be pushed by clasp'); });
    mocha_1.it('should open --help', function () { return expectHelp('open', 'Open a script'); });
    mocha_1.it('should deployments --help', function () { return expectHelp('deployments', 'List deployment ids of a script'); });
    mocha_1.it('should undeploy --help', function () { return expectHelp('undeploy', 'Undeploy a deployment of a project'); });
    mocha_1.it('should versions --help', function () { return expectHelp('versions', 'List versions of a script'); });
    mocha_1.it('should version --help', function () { return expectHelp('version', 'Creates an immutable version of the script'); });
    mocha_1.it('should list --help', function () { return expectHelp('list', 'List App Scripts projects'); });
    mocha_1.it('should apis --help', function () { return expectHelp('apis', 'List, enable, or disable APIs'); });
    mocha_1.it('should help --help', function () { return expectHelp('help', 'Display help'); });
});
mocha_1.describe('Test extractScriptId function', function () {
    mocha_1.it('should return scriptId correctly', function () {
        chai_1.expect(urls_1.extractScriptId(constants_1.SCRIPT_ID)).to.equal(constants_1.SCRIPT_ID);
        chai_1.expect(urls_1.extractScriptId(urls_1.URL.SCRIPT(constants_1.SCRIPT_ID))).to.equal(constants_1.SCRIPT_ID);
    });
});
mocha_1.describe('Test clasp pull function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should pull an existing project correctly', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['pull'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test URL utils function', function () {
    mocha_1.it('should create Script URL correctly', function () {
        var expectedUrl = "https://script.google.com/d/" + constants_1.SCRIPT_ID + "/edit";
        chai_1.expect(urls_1.URL.SCRIPT(constants_1.SCRIPT_ID)).to.equal(expectedUrl);
    });
    mocha_1.it('should create Creds URL correctly', function () {
        var expectedURL = "https://console.developers.google.com/apis/credentials?project=" + constants_1.SCRIPT_ID;
        chai_1.expect(urls_1.URL.CREDS(constants_1.SCRIPT_ID)).to.equal(expectedURL);
    });
});
mocha_1.describe('Test clasp version and versions function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    var versionNumber = 0;
    mocha_1.it('should prompt for version description', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['version'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_1.LOG.GIVE_DESCRIPTION);
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should create a new version correctly', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['version', 'xxx'], { encoding: 'utf8' });
        versionNumber =
            Number(result.stdout.substring(result.stdout.lastIndexOf(' '), result.stdout.length - 2));
        chai_1.expect(versionNumber).to.be.greaterThan(0);
    });
    // TODO: this test needs to be updated
    mocha_1.it.skip('should list versions correctly', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['versions'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Versions');
        if (versionNumber)
            chai_1.expect(result.stdout).to.contain(versionNumber + ' - ');
        chai_1.expect(result.status).to.equal(0);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test setting function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should return current setting value', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['setting', 'scriptId'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.equal(process.env.SCRIPT_ID);
    });
    mocha_1.it('should update .clasp.json with provided value', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['setting', 'scriptId', 'test'], { encoding: 'utf8' });
        var fileContents = fs_extra_1.default.readFileSync('.clasp.json', 'utf8');
        chai_1.expect(result.stdout).to.contain('Updated "scriptId":');
        chai_1.expect(result.stdout).to.contain('â†’ "test"');
        chai_1.expect(fileContents).to.contain('"test"');
    });
    mocha_1.it('should error on unknown keys', function () {
        // Test getting
        var result = child_process_1.spawnSync(constants_1.CLASP, ['setting', 'foo'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.UNKNOWN_KEY('foo'));
        // Test setting
        result = child_process_1.spawnSync(constants_1.CLASP, ['setting', 'bar', 'foo'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.UNKNOWN_KEY('bar'));
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test getAppsScriptFileName function from files', function () {
    mocha_1.it('should return the basename correctly', function () {
        chai_1.expect(files_1.getAppsScriptFileName('./', 'appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('', 'appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('./dist', './dist/appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('./dist', './dist/foo/Code.js')).to.equal('foo/Code');
    });
});
mocha_1.describe('Test URL helper from utils', function () {
    mocha_1.it('should return the scriptURL correctly', function () {
        var url = urls_1.URL.SCRIPT('abcdefghijklmnopqrstuvwxyz');
        chai_1.expect(url).to.equal('https://script.google.com/d/abcdefghijklmnopqrstuvwxyz/edit');
    });
});
mocha_1.describe('Test getWebApplicationURL function from utils', function () {
    mocha_1.it('should return the scriptURL correctly', function () {
        var url = utils_1.getWebApplicationURL({
            entryPoints: [
                {
                    entryPointType: 'WEB_APP',
                    webApp: {
                        url: 'https://script.google.com/macros/s/abcdefghijklmnopqrstuvwxyz/exec',
                    },
                },
            ],
        });
        chai_1.expect(url).to.equal('https://script.google.com/macros/s/abcdefghijklmnopqrstuvwxyz/exec');
    });
});
mocha_1.describe('Test getDefaultProjectName function from utils', function () {
    mocha_1.it('should return the current directory name correctly', function () {
        chai_1.expect(utils_1.getDefaultProjectName()).to.equal('Clasp');
    });
});
mocha_1.describe('Test getFileType function from utils', function () {
    mocha_1.it('should return the lowercase file type correctly', function () {
        chai_1.expect(files_1.getFileType('SERVER_JS')).to.equal('js');
        chai_1.expect(files_1.getFileType('GS')).to.equal('gs');
        chai_1.expect(files_1.getFileType('JS')).to.equal('js');
        chai_1.expect(files_1.getFileType('HTML')).to.equal('html');
    });
    mocha_1.it('should return the specified file extention if the file type is SERVER_JS', function () {
        chai_1.expect(files_1.getFileType('SERVER_JS', 'gs')).to.equal('gs');
        chai_1.expect(files_1.getFileType('GS', 'js')).to.equal('gs');
        chai_1.expect(files_1.getFileType('JS', 'gs')).to.equal('js');
        chai_1.expect(files_1.getFileType('HTML', 'js')).to.equal('html');
    });
});
mocha_1.describe('Test getAPIFileType function from utils', function () {
    mocha_1.it('should return the uppercase file type correctly', function () {
        chai_1.expect(utils_1.getAPIFileType('file.GS')).to.equal('SERVER_JS');
        chai_1.expect(utils_1.getAPIFileType('file.JS')).to.equal('SERVER_JS');
        chai_1.expect(utils_1.getAPIFileType('file.js')).to.equal('SERVER_JS');
        chai_1.expect(utils_1.getAPIFileType('file.jsx')).to.equal('JSX');
        chai_1.expect(utils_1.getAPIFileType('file.js.html')).to.equal('HTML');
    });
});
mocha_1.describe('Test saveProject function from utils', function () {
    mocha_1.it('should save the scriptId correctly', function () {
        child_process_1.spawnSync('rm', ['.clasp.json']);
        var isSaved = function () { return __awaiter(void 0, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.saveProject({ scriptId: '12345' })];
                    case 1:
                        _a.sent();
                        id = fs_extra_1.default.readFileSync(path_1.default.join(__dirname, '/../.clasp.json'), 'utf8');
                        chai_1.expect(id).to.equal('{"scriptId":"12345"}');
                        return [2 /*return*/];
                }
            });
        }); };
        chai_1.expect(isSaved).to.not.equal(null);
    });
    mocha_1.it('should save the scriptId, rootDir correctly', function () {
        child_process_1.spawnSync('rm', ['.clasp.json']);
        var isSaved = function () { return __awaiter(void 0, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.saveProject({ scriptId: '12345', rootDir: './dist' })];
                    case 1:
                        _a.sent();
                        id = fs_extra_1.default.readFileSync(path_1.default.join(__dirname, '/../.clasp.json'), 'utf8');
                        chai_1.expect(id).to.equal('{"scriptId":"12345","rootDir":"./dist"}');
                        return [2 /*return*/];
                }
            });
        }); };
        chai_1.expect(isSaved).to.not.equal(null);
    });
});
mocha_1.describe('Test variations of clasp help', function () {
    var expectHelp = function (variation) {
        var result = child_process_1.spawnSync(constants_1.CLASP, [variation], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(constants_1.CLASP_USAGE);
    };
    mocha_1.it('should show help for clasp help', function () { return expectHelp('help'); });
    mocha_1.it('should show help for clasp --help', function () { return expectHelp('--help'); });
    mocha_1.it('should show help for clasp -h', function () { return expectHelp('-h'); });
});
mocha_1.describe('Test variations of clasp --version', function () {
    var expectVersion = function (variation) {
        var result = child_process_1.spawnSync(constants_1.CLASP, [variation], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(require('../package.json').version);
    };
    mocha_1.it('should show version for clasp --version', function () { return expectVersion('--version'); });
    mocha_1.it('should show version for clasp -v', function () { return expectVersion('-v'); });
});
mocha_1.describe('Test unknown functions', function () {
    mocha_1.it('should show version correctly', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['unknown'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain("Unknown command");
        chai_1.expect(result.status).to.equal(1);
    });
});
mocha_1.describe('Test all functions while logged out', function () {
    before(function () {
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcGlobal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        if (fs_extra_1.default.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs_extra_1.default.removeSync(constants_1.CLASP_PATHS.rcLocal);
    });
    var expectNoCredentials = function (command) {
        var result = child_process_1.spawnSync(constants_1.CLASP, [command], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // expect(result.stderr).to.include(ERROR.NO_CREDENTIALS);
    };
    mocha_1.it('should fail to list (no credentials)', function () { return expectNoCredentials('list'); });
    mocha_1.it('should fail to clone (no credentials)', function () { return expectNoCredentials('clone'); });
    mocha_1.it('should fail to push (no credentials)', function () { return expectNoCredentials('push'); });
    mocha_1.it('should fail to deployments (no credentials)', function () { return expectNoCredentials('deployments'); });
    mocha_1.it('should fail to deploy (no credentials)', function () { return expectNoCredentials('deploy'); });
    mocha_1.it('should fail to version (no credentials)', function () { return expectNoCredentials('version'); });
    mocha_1.it('should fail to versions (no credentials)', function () { return expectNoCredentials('versions'); });
    // TODO: all test should have same order of checks
    // and should all return ERROR.NO_CREDENTIALS
    mocha_1.it('should fail to pull (no .clasp.json file)', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['pull'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.SETTINGS_DNE);
    });
    mocha_1.it('should fail to open (no .clasp.json file)', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['open'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.SETTINGS_DNE);
    });
    mocha_1.it('should fail to show logs (no .clasp.json file)', function () {
        var result = child_process_1.spawnSync(constants_1.CLASP, ['logs'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.SETTINGS_DNE);
    });
});
//# sourceMappingURL=data:application/json;base64,